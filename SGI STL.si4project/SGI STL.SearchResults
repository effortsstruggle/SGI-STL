---- _S_freelist_index Matches (12 in 2 files) ----
stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) line 322 : 
# endif
  static  size_t _S_freelist_index(size_t __bytes) {
        return (((__bytes) + (size_t)_ALIGN-1)/(size_t)_ALIGN - 1);
  }

__default_alloc_template::allocate in stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) : 
      _Obj* __STL_VOLATILE* __my_free_list
          = _S_free_list + _S_freelist_index(__n);
      // Acquire the lock here with a constructor call.
      // This ensures that it is released in exit or during stack
      // unwinding.
__default_alloc_template::deallocate in stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) : 
      _Obj* __STL_VOLATILE*  __my_free_list
          = _S_free_list + _S_freelist_index(__n);
      _Obj* __q = (_Obj*)__p;

      // acquire lock
__default_alloc_template::_S_chunk_alloc in stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) : 
            _Obj* __STL_VOLATILE* __my_free_list =
                        _S_free_list + _S_freelist_index(__bytes_left);

            ((_Obj*)_S_start_free) -> _M_free_list_link = *__my_free_list;
            *__my_free_list = (_Obj*)_S_start_free;
__default_alloc_template::_S_chunk_alloc in stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) : 
                 __i += (size_t) _ALIGN) {
                __my_free_list = _S_free_list + _S_freelist_index(__i);
                __p = *__my_free_list;
                if (0 != __p) {
                    *__my_free_list = __p -> _M_free_list_link;
__default_alloc_template::_S_refill in stl_alloc.h (SGI-STL-master\SGI-STL-master\SGI-STL V3.3) : 
    if (1 == __nobjs) return(__chunk);
    __my_free_list = _S_free_list + _S_freelist_index(__n);

    /* Build free list in chunk */
      __result = (_Obj*)__chunk;
__default_alloc_template in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
  //根据申请数据块大小找到相应空闲链表的下标，n 从 0 起算
  static  size_t _S_freelist_index(size_t __bytes) {
        return (((__bytes) + (size_t)_ALIGN-1)/(size_t)_ALIGN - 1);
  }

__default_alloc_template::allocate in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
      _Obj* __STL_VOLATILE* __my_free_list
          = _S_free_list + _S_freelist_index(__n);
      // Acquire the lock here with a constructor call.
      // This ensures that it is released in exit or during stack
      // unwinding.
__default_alloc_template::deallocate in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
      _Obj* __STL_VOLATILE*  __my_free_list
          = _S_free_list + _S_freelist_index(__n);   // 否则将空间回收到相应空闲链表（由释放块的大小决定）中  
      _Obj* __q = (_Obj*)__p;

      // acquire lock
__default_alloc_template::_S_chunk_alloc in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
            _Obj* __STL_VOLATILE* __my_free_list =
                        _S_free_list + _S_freelist_index(__bytes_left);

            ((_Obj*)_S_start_free) -> _M_free_list_link = *__my_free_list;
            *__my_free_list = (_Obj*)_S_start_free;
__default_alloc_template::_S_chunk_alloc in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
                 __i += (size_t) _ALIGN) {
                __my_free_list = _S_free_list + _S_freelist_index(__i);
                __p = *__my_free_list;
                if (0 != __p) {
                    *__my_free_list = __p -> _M_free_list_link;
__default_alloc_template::_S_refill in stl_alloc.h (SGI-STL-master\SGI-STL-master\The Annotated STL Sources V3.3\allocator) : 
    if (1 == __nobjs) return(__chunk);
    __my_free_list = _S_free_list + _S_freelist_index(__n);  // 否则根据申请数据块的大小找到相应空闲链表  

    /* Build free list in chunk */
      __result = (_Obj*)__chunk;
